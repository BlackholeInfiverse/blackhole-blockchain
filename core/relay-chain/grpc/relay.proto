syntax = "proto3";

package relay;

option go_package = "github.com/Shivam-Patel-G/blackhole-blockchain/core/relay-chain/grpc";

// RelayService provides high-performance relay operations for external chains
service RelayService {
    // SubmitTransaction submits a transaction to the Blackhole chain
    rpc SubmitTransaction(TransactionRequest) returns (TransactionResponse);
    
    // GetChainStatus returns the current status of the Blackhole chain
    rpc GetChainStatus(StatusRequest) returns (StatusResponse);
    
    // SubscribeToEvents subscribes to real-time blockchain events
    rpc SubscribeToEvents(EventSubscription) returns (stream Event);
    
    // GetBalance retrieves account balance for specific tokens
    rpc GetBalance(BalanceRequest) returns (BalanceResponse);
    
    // ValidateTransaction validates a transaction before submission
    rpc ValidateTransaction(TransactionRequest) returns (ValidationResponse);
}

// Transaction submission request
message TransactionRequest {
    string type = 1;           // "transfer", "stake_deposit", "stake_withdraw"
    string from = 2;           // Source address
    string to = 3;             // Destination address
    uint64 amount = 4;         // Amount in base units
    string token_id = 5;       // Token symbol (BHX, USDT, etc.)
    uint64 fee = 6;            // Transaction fee
    uint64 nonce = 7;          // Transaction nonce
    int64 timestamp = 8;       // Transaction timestamp
    bytes signature = 9;       // Transaction signature
    bytes public_key = 10;     // Public key for verification
}

// Transaction submission response
message TransactionResponse {
    bool success = 1;
    string transaction_id = 2;
    string hash = 3;
    string status = 4;         // "pending", "confirmed", "failed"
    string error = 5;
    int64 submitted_at = 6;
}

// Chain status request
message StatusRequest {
    bool include_validators = 1;
    bool include_pending_txs = 2;
}

// Chain status response
message StatusResponse {
    bool success = 1;
    string chain_id = 2;
    uint64 block_height = 3;
    string latest_block_hash = 4;
    int64 latest_block_time = 5;
    uint64 total_supply = 6;
    uint64 circulating_supply = 7;
    uint32 validator_count = 8;
    uint32 active_validators = 9;
    uint32 pending_transactions = 10;
    string network_hash_rate = 11;
    repeated ValidatorInfo validators = 12;
}

// Validator information
message ValidatorInfo {
    string address = 1;
    uint64 stake = 2;
    string status = 3;         // "active", "jailed", "inactive"
    double commission = 4;
    double uptime = 5;
    uint64 blocks_produced = 6;
    int64 last_block_time = 7;
    bool jailed = 8;
    uint32 strikes = 9;
}

// Event subscription request
message EventSubscription {
    repeated string event_types = 1;  // "block", "transaction", "staking", "slashing"
    string wallet_address = 2;        // Filter events for specific wallet
    bool include_all = 3;             // Include all events regardless of wallet
}

// Real-time event stream
message Event {
    string id = 1;
    string type = 2;           // "block_created", "transaction_confirmed", "stake_deposited", etc.
    int64 timestamp = 3;
    map<string, string> data = 4;  // Event-specific data
    uint64 block_height = 5;
    string transaction_id = 6;
}

// Balance request
message BalanceRequest {
    string address = 1;
    string token_id = 2;       // Optional: specific token, empty for all tokens
}

// Balance response
message BalanceResponse {
    bool success = 1;
    string address = 2;
    map<string, uint64> balances = 3;  // token_id -> balance
    uint64 total_value_usd = 4;
    int64 last_updated = 5;
    string error = 6;
}

// Transaction validation response
message ValidationResponse {
    bool valid = 1;
    string error = 2;
    uint64 estimated_fee = 3;
    uint64 estimated_gas = 4;
    double success_probability = 5;
    repeated string warnings = 6;
}
