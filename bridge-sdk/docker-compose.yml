version: '3.8'

services:
  # BlackHole Bridge Node
  bridge-node:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: blackhole-bridge-node
    restart: ${RESTART_POLICY:-unless-stopped}
    ports:
      - "${SERVER_PORT:-8084}:8084"
      - "${METRICS_PORT:-9090}:9090"
    environment:
      - SERVER_HOST=${SERVER_HOST:-0.0.0.0}
      - SERVER_PORT=${SERVER_PORT:-8084}
      - DB_PATH=/app/data/bridge.db
      - LOG_FILE=/app/logs/bridge.log
      - ETHEREUM_RPC_URL=${ETHEREUM_RPC_URL}
      - ETHEREUM_WS_URL=${ETHEREUM_WS_URL}
      - SOLANA_RPC_URL=${SOLANA_RPC_URL}
      - SOLANA_WS_URL=${SOLANA_WS_URL}
      - BLACKHOLE_RPC_URL=${BLACKHOLE_RPC_URL}
      - ETHEREUM_BRIDGE_CONTRACT=${ETHEREUM_BRIDGE_CONTRACT}
      - SOLANA_BRIDGE_PROGRAM=${SOLANA_BRIDGE_PROGRAM}
      - BLACKHOLE_BRIDGE_CONTRACT=${BLACKHOLE_BRIDGE_CONTRACT}
      - ETHEREUM_PRIVATE_KEY=${ETHEREUM_PRIVATE_KEY}
      - SOLANA_PRIVATE_KEY=${SOLANA_PRIVATE_KEY}
      - BLACKHOLE_PRIVATE_KEY=${BLACKHOLE_PRIVATE_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DEBUG_MODE=${DEBUG_MODE:-false}
      - REDIS_URL=${REDIS_URL}
      - POSTGRES_URL=${POSTGRES_URL}
      # Enhanced Configuration
      - ENABLE_COLORED_LOGS=${ENABLE_COLORED_LOGS:-true}
      - ENABLE_ZAP_LOGGER=${ENABLE_ZAP_LOGGER:-true}
      - REPLAY_PROTECTION_ENABLED=${REPLAY_PROTECTION_ENABLED:-true}
      - CIRCUIT_BREAKER_ENABLED=${CIRCUIT_BREAKER_ENABLED:-true}
      - MAX_RETRIES=${MAX_RETRIES:-3}
      - RETRY_DELAY_MS=${RETRY_DELAY_MS:-5000}
      - BATCH_SIZE=${BATCH_SIZE:-100}
      # Simulation Configuration
      - SIMULATION_MODE=${SIMULATION_MODE:-false}
      - ENABLE_FULL_SIMULATION=${ENABLE_FULL_SIMULATION:-false}
      - TOKEN_DEPLOYMENT_ENABLED=${TOKEN_DEPLOYMENT_ENABLED:-false}
      - SCREENSHOT_MODE=${SCREENSHOT_MODE:-false}
    volumes:
      - bridge-data:/app/data
      - bridge-logs:/app/logs
      - bridge-screenshots:/app/simulation_screenshots
      - bridge-simulation-logs:/app/simulation_logs
      - ./media:/app/media:ro
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - bridge-network
    depends_on:
      - redis
      - postgres

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: blackhole-bridge-redis
    restart: ${RESTART_POLICY:-unless-stopped}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - bridge-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: blackhole-bridge-postgres
    restart: ${RESTART_POLICY:-unless-stopped}
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: bridge_db
      POSTGRES_USER: bridge
      POSTGRES_PASSWORD: bridge123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - bridge-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bridge -d bridge_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: blackhole-bridge-prometheus
    restart: ${RESTART_POLICY:-unless-stopped}
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - bridge-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: blackhole-bridge-grafana
    restart: ${RESTART_POLICY:-unless-stopped}
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - bridge-network
    depends_on:
      - prometheus

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: blackhole-bridge-nginx
    restart: ${RESTART_POLICY:-unless-stopped}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx-logs:/var/log/nginx
    networks:
      - bridge-network
    depends_on:
      - bridge-node

volumes:
  bridge-data:
    driver: local
  bridge-logs:
    driver: local
  bridge-screenshots:
    driver: local
  bridge-simulation-logs:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-logs:
    driver: local

networks:
  bridge-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${SUBNET:-172.20.0.0/16}
