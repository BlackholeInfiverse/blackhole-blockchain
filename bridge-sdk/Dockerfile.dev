# Development Dockerfile for BlackHole Bridge
FROM golang:1.21-alpine AS base

# Install development dependencies
RUN apk add --no-cache \
    git \
    gcc \
    musl-dev \
    curl \
    wget \
    bash \
    make

# Install development tools
RUN go install github.com/cosmtrek/air@latest && \
    go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest && \
    go install github.com/swaggo/swag/cmd/swag@latest

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
# RUN go mod download

# Development stage
FROM base AS development

# Copy source code
COPY . .

# Expose ports
EXPOSE 8084 9090 6060

# Default command for development
CMD ["air", "-c", ".air.toml"]

# Test stage
FROM base AS test

# Copy source code
COPY . .

# Run tests
CMD ["go", "test", "-v", "-race", "-coverprofile=coverage.out", "./..."]

# Build stage for production
FROM base AS builder

# Copy source code
COPY . .

# Build the application
RUN CGO_ENABLED=1 GOOS=linux go build -a -installsuffix cgo -o bridge-node ./example/main.go

# Production stage
FROM alpine:latest AS production

# Install runtime dependencies
RUN apk --no-cache add ca-certificates tzdata

# Create app user
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Set working directory
WORKDIR /app

# Copy binary from builder
COPY --from=builder /app/bridge-node .

# Copy static assets
COPY --from=builder /app/example/blackhole-logo.jpg .

# Create necessary directories
RUN mkdir -p data logs && \
    chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8084

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8084/health || exit 1

# Run the application
CMD ["./bridge-node"]
