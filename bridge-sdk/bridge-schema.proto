syntax = "proto3";

package blackhole.bridge;

option go_package = "github.com/Shivam-Patel-G/blackhole-blockchain/bridge-sdk/proto";

import "google/protobuf/timestamp.proto";

// Bridge Service Definition
service BridgeService {
  // Manual transfer operations
  rpc ExecuteTransfer(TransferRequest) returns (TransferResponse);
  rpc GetTransferStatus(TransferStatusRequest) returns (TransferStatusResponse);
  
  // Event logging and monitoring
  rpc GetEventLogs(EventLogRequest) returns (EventLogResponse);
  rpc GetRetryLogs(RetryLogRequest) returns (RetryLogResponse);
  rpc GetBridgeStatus(BridgeStatusRequest) returns (BridgeStatusResponse);
  
  // Real-time streaming
  rpc StreamEvents(StreamEventsRequest) returns (stream EventUpdate);
  rpc StreamRetries(StreamRetriesRequest) returns (stream RetryUpdate);
  
  // Relay operations
  rpc RelayTransaction(RelayRequest) returns (RelayResponse);
  rpc GetRelayStatus(RelayStatusRequest) returns (RelayStatusResponse);
}

// Transfer Request/Response Messages
message TransferRequest {
  string route = 1;                    // ETH_TO_BH, BH_TO_SOL, etc.
  double amount = 2;                   // Transfer amount
  string source_address = 3;           // Source wallet address
  string dest_address = 4;             // Destination wallet address
  double gas_fee = 5;                  // Gas fee amount
  int32 confirmations = 6;             // Required confirmations
  int32 timeout = 7;                   // Timeout in seconds
  string priority = 8;                 // low, medium, high, urgent
  map<string, string> metadata = 9;    // Additional metadata
}

message TransferResponse {
  bool success = 1;
  string transaction_id = 2;
  string status = 3;                   // pending, processing, completed, failed
  string estimated_time = 4;           // Human readable estimate
  string error_message = 5;            // Error if failed
  TransferData data = 6;               // Transfer details
}

message TransferData {
  string transaction_id = 1;
  string route = 2;
  string amount = 3;
  string status = 4;
  string estimated_time = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
}

// Transfer Status Messages
message TransferStatusRequest {
  string transaction_id = 1;
}

message TransferStatusResponse {
  bool success = 1;
  TransferStatusData data = 2;
  string error_message = 3;
}

message TransferStatusData {
  string transaction_id = 1;
  string amount = 2;
  int32 confirmations = 3;
  int32 required_confirmations = 4;
  string source_chain = 5;
  string dest_chain = 6;
  string token = 7;
  string status = 8;                   // pending, processing, confirming, relaying, completed, failed
  string status_message = 9;
  int32 progress = 10;                 // 0-100 percentage
  string gas_used = 11;
  string latest_log = 12;
  google.protobuf.Timestamp created_at = 13;
}

// Event Logging Messages
message EventLogRequest {
  string event_type = 1;               // Optional filter
  string chain = 2;                    // Optional filter
  int32 limit = 3;                     // Max events to return
  int32 offset = 4;                    // Pagination offset
  google.protobuf.Timestamp since = 5; // Events since timestamp
}

message EventLogResponse {
  bool success = 1;
  repeated EventEntry events = 2;
  int32 total_count = 3;
  string error_message = 4;
}

message EventEntry {
  string id = 1;
  string type = 2;                     // transfer, bridge_event, retry, etc.
  string chain = 3;                    // ethereum, solana, blackhole
  string tx_hash = 4;
  google.protobuf.Timestamp timestamp = 5;
  map<string, string> data = 6;        // Event-specific data
  string status = 7;                   // success, failed, pending
}

// Retry Logging Messages
message RetryLogRequest {
  string retry_id = 1;                 // Optional filter
  string event_type = 2;               // Optional filter
  int32 limit = 3;
  int32 offset = 4;
}

message RetryLogResponse {
  bool success = 1;
  repeated RetryEntry retries = 2;
  int32 total_count = 3;
  RetryQueueStats queue_stats = 4;
  string error_message = 5;
}

message RetryEntry {
  string id = 1;
  string type = 2;
  int32 attempts = 3;
  int32 max_retries = 4;
  google.protobuf.Timestamp next_retry = 5;
  string last_error = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
  map<string, string> data = 9;
}

message RetryQueueStats {
  int32 pending_items = 1;
  int32 ready_items = 2;
  int32 total_items = 3;
  int32 max_retries = 4;
  string base_delay = 5;
  string max_delay = 6;
}

// Bridge Status Messages
message BridgeStatusRequest {
  bool include_detailed_stats = 1;
}

message BridgeStatusResponse {
  bool success = 1;
  BridgeStatusData data = 2;
  string error_message = 3;
}

message BridgeStatusData {
  string overall_status = 1;           // healthy, degraded, critical
  google.protobuf.Timestamp uptime_since = 2;
  ChainStatus ethereum = 3;
  ChainStatus solana = 4;
  ChainStatus blackhole = 5;
  RelayServerStatus relay_server = 6;
  RetryQueueStats retry_queue = 7;
  int32 dead_letter_count = 8;
  int32 total_transactions = 9;
  int32 successful_transactions = 10;
  int32 failed_transactions = 11;
  double success_rate = 12;
}

message ChainStatus {
  string status = 1;                   // connected, disconnected, error
  int32 recent_events = 2;             // Events in last 5 minutes
  google.protobuf.Timestamp last_event = 3;
  string last_error = 4;
  int32 block_height = 5;              // Current block height
}

message RelayServerStatus {
  string status = 1;                   // running, stopped, error
  int32 port = 2;
  int32 connections = 3;
  int64 total_messages = 4;
  google.protobuf.Timestamp last_activity = 5;
  google.protobuf.Timestamp started_at = 6;
  string uptime = 7;
}

// Streaming Messages
message StreamEventsRequest {
  repeated string event_types = 1;     // Filter by event types
  repeated string chains = 2;          // Filter by chains
}

message EventUpdate {
  EventEntry event = 1;
  google.protobuf.Timestamp stream_timestamp = 2;
}

message StreamRetriesRequest {
  bool include_completed = 1;
}

message RetryUpdate {
  RetryEntry retry = 1;
  string update_type = 2;              // added, updated, completed, failed
  google.protobuf.Timestamp stream_timestamp = 3;
}

// Relay Messages
message RelayRequest {
  string transaction_id = 1;
  string target_chain = 2;
  map<string, string> relay_data = 3;
}

message RelayResponse {
  bool success = 1;
  string relay_id = 2;
  string status = 3;
  string error_message = 4;
}

message RelayStatusRequest {
  string relay_id = 1;
}

message RelayStatusResponse {
  bool success = 1;
  RelayStatusData data = 2;
  string error_message = 3;
}

message RelayStatusData {
  string relay_id = 1;
  string status = 2;
  string target_chain = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp completed_at = 5;
  string processing_time = 6;
  map<string, string> relay_metadata = 7;
}
