# BlackHole Bridge Configuration Template
# =======================================
# 
# Copy this file to .env and configure with your actual values
# cp .env.example .env
#

# Application Settings
APP_NAME=blackhole-bridge
APP_VERSION=1.0.0
APP_ENV=production

# ===== BLOCKCHAIN INTEGRATION =====
# Set to true to use real BlackHole blockchain, false for simulation mode
USE_REAL_BLOCKCHAIN=true

# BlackHole blockchain configuration
BLOCKCHAIN_PORT=3000
BLOCKCHAIN_API_PORT=8080

# Server Configuration
SERVER_HOST=0.0.0.0
SERVER_PORT=8084
SERVER_READ_TIMEOUT=30s
SERVER_WRITE_TIMEOUT=30s
SERVER_IDLE_TIMEOUT=60s

# Database Configuration
DB_PATH=./data/bridge.db
DB_MAX_CONNECTIONS=10
DB_CONNECTION_TIMEOUT=30s

# Blockchain RPC Endpoints (REQUIRED - Replace with your actual endpoints)
ETHEREUM_RPC_URL=https://eth-mainnet.alchemyapi.io/v2/YOUR_ALCHEMY_KEY_HERE
ETHEREUM_WS_URL=wss://eth-mainnet.alchemyapi.io/v2/YOUR_ALCHEMY_KEY_HERE
SOLANA_RPC_URL=https://api.mainnet-beta.solana.com
SOLANA_WS_URL=wss://api.mainnet-beta.solana.com
BLACKHOLE_RPC_URL=http://blackhole-node:8545

# Testnet Configuration (for development)
ETHEREUM_TESTNET_RPC=https://eth-goerli.alchemyapi.io/v2/YOUR_ALCHEMY_KEY_HERE
SOLANA_TESTNET_RPC=https://api.devnet.solana.com
USE_TESTNET=false

# Bridge Contract Addresses (REQUIRED - Replace with actual contract addresses)
ETHEREUM_BRIDGE_CONTRACT=0x742d35Cc6634C0532925a3b8D4C9db96590c6C87
SOLANA_BRIDGE_PROGRAM=9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM
BLACKHOLE_BRIDGE_CONTRACT=bh1234567890123456789012345678901234567890

# Private Keys (CRITICAL - Replace with your actual private keys and keep secure!)
ETHEREUM_PRIVATE_KEY=your_ethereum_private_key_here
SOLANA_PRIVATE_KEY=your_solana_private_key_here
BLACKHOLE_PRIVATE_KEY=your_blackhole_private_key_here

# Security Configuration (REQUIRED - Generate secure values)
JWT_SECRET=your_secure_jwt_secret_key_here_minimum_32_characters
API_KEY=your_secure_api_key_here
CORS_ORIGINS=http://localhost:3000,https://yourdomain.com

# Logging Configuration
LOG_LEVEL=info
LOG_FORMAT=json
LOG_FILE=./logs/bridge.log
LOG_MAX_SIZE=100MB
LOG_MAX_BACKUPS=5
LOG_MAX_AGE=30

# Monitoring & Metrics
METRICS_ENABLED=true
METRICS_PORT=9090
HEALTH_CHECK_INTERVAL=30s

# Bridge Settings
CONFIRMATION_BLOCKS_ETH=12
CONFIRMATION_BLOCKS_SOL=32
CONFIRMATION_BLOCKS_BH=6
MAX_RETRY_ATTEMPTS=3
RETRY_DELAY=5s
BATCH_SIZE=100

# Circuit Breaker Configuration
CIRCUIT_BREAKER_ENABLED=true
CIRCUIT_BREAKER_THRESHOLD=5
CIRCUIT_BREAKER_TIMEOUT=60s
CIRCUIT_BREAKER_RESET_TIMEOUT=300s

# Rate Limiting
RATE_LIMIT_ENABLED=true
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW=1m

# Cache Configuration
CACHE_ENABLED=true
CACHE_TTL=300s
CACHE_MAX_SIZE=1000

# Replay Protection
REPLAY_PROTECTION_ENABLED=true
REPLAY_CACHE_SIZE=10000
REPLAY_CACHE_TTL=24h

# Recovery System
RECOVERY_ENABLED=true
RECOVERY_INTERVAL=60s
RECOVERY_MAX_ATTEMPTS=5
RECOVERY_BATCH_SIZE=50

# Gas Configuration
ETH_GAS_LIMIT=200000
ETH_GAS_PRICE=20000000000
SOL_COMPUTE_UNITS=200000
BH_GAS_LIMIT=100000

# Fee Configuration
BRIDGE_FEE_PERCENTAGE=0.1
MIN_BRIDGE_AMOUNT=0.001
MAX_BRIDGE_AMOUNT=1000

# Development Settings
DEBUG_MODE=false
ENABLE_PROFILING=false
ENABLE_TRACING=false

# Docker Compose Settings
COMPOSE_PROJECT_NAME=blackhole-bridge
RESTART_POLICY=unless-stopped

# Volume Mounts
DATA_VOLUME=bridge-data
LOGS_VOLUME=bridge-logs

# Network Configuration
BRIDGE_NETWORK=bridge-network
SUBNET=172.20.0.0/16

# External Services
REDIS_URL=redis://redis:6379
POSTGRES_URL=postgres://bridge:bridge123@postgres:5432/bridge_db

# Backup Configuration
BACKUP_ENABLED=true
BACKUP_INTERVAL=24h
BACKUP_RETENTION=7d
BACKUP_S3_BUCKET=blackhole-bridge-backups

# Notification Settings (Optional)
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK
DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/YOUR/DISCORD/WEBHOOK
EMAIL_SMTP_HOST=smtp.gmail.com
EMAIL_SMTP_PORT=587
EMAIL_FROM=alerts@blackhole.network
EMAIL_TO=admin@blackhole.network

# Production Security Notes:
# ==========================
# 1. Never commit .env files with real credentials to version control
# 2. Use environment-specific values for different deployments
# 3. Consider using Docker secrets or external secret management for production
# 4. Regularly rotate private keys and API keys
# 5. Use strong, unique passwords and secrets
# 6. Enable firewall rules to restrict access to sensitive ports
# 7. Use HTTPS in production with valid SSL certificates
