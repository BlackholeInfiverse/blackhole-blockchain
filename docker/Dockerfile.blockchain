# BlackHole Main Blockchain Docker Image
FROM golang:1.24.3-alpine AS builder

# Set GOTOOLCHAIN to allow downloading newer Go versions (if needed)
ENV GOTOOLCHAIN=local

# Install required packages
RUN apk add --no-cache git gcc musl-dev sqlite-dev

# Set working directory
WORKDIR /app

# Copy go workspace files first for better caching
COPY go.work go.work.sum ./
COPY bridge-sdk/go.mod bridge-sdk/go.sum ./bridge-sdk/
COPY core/go.mod ./core/
COPY libs/go.mod ./libs/
COPY services/go.mod ./services/
COPY parachains/go.mod ./parachains/

# Copy the entire source code (needed for go.work)
COPY bridge-sdk/ ./bridge-sdk/
COPY core/ ./core/
COPY libs/ ./libs/
COPY services/ ./services/
COPY parachains/ ./parachains/

# Download dependencies
WORKDIR /app/core/relay-chain
RUN go mod download

# Build the main blockchain application
WORKDIR /app/core/relay-chain
RUN CGO_ENABLED=1 GOOS=linux go build -a -installsuffix cgo -o blockchain ./cmd/relay/main.go

# Final stage - minimal runtime image
FROM alpine:latest

# Install runtime dependencies
RUN apk --no-cache add ca-certificates sqlite

# Create app directory and user
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

WORKDIR /app

# Copy the binary from builder stage
COPY --from=builder /app/core/relay-chain/blockchain .

# Create necessary directories
RUN mkdir -p data logs config && \
    chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Expose the blockchain ports
EXPOSE 8080 8545 30303

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Set environment variables
ENV BLOCKCHAIN_PORT=8080
ENV RPC_PORT=8545
ENV P2P_PORT=30303
ENV DATABASE_PATH=./data/blockchain.db
ENV LOG_LEVEL=info
ENV LOG_FILE=./logs/blockchain.log
ENV PEER_DISCOVERY=true
ENV MAX_PEERS=50

# Run the blockchain
CMD ["./blockchain"]
